/* The following code was generated by JFlex 1.4.3 on 11.01.13 23:18 */

/*
 * Copyright 2008 Ayman Al-Sairafi ayman.alsairafi@gmail.com,
 * 2012 Felix Natter
 * 
 * Some very basic ideas taken from here:
 * http://dev.geogebra.org/trac/browser/trunk/geogebra/desktop/geogebra/gui/editor/latex.jflex?rev=13586 and
 * the list of keywords is from gtksourceview's latex.lang
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License
 *       at http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package jsyntaxpane.lexers;


import jsyntaxpane.Token;
import jsyntaxpane.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11.01.13 23:18 from the specification file
 * <tt>latex.flex</tt>
 */
@SuppressWarnings("unused")
public final class LaTeXLexer extends DefaultJFlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MATHMODE3 = 6;
  public static final int MATHMODE2 = 4;
  public static final int MATHMODE1 = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\7\2\0\1\1\22\0\1\5\3\0\1\3\1\6"+
    "\1\2\1\0\1\0\1\0\6\0\12\4\7\0\1\14\1\21\1\24"+
    "\1\26\1\27\1\13\1\33\1\13\1\35\1\13\1\36\1\37\1\46"+
    "\1\46\1\50\1\51\1\13\1\52\1\53\1\54\5\13\1\21\1\11"+
    "\1\10\1\12\1\2\1\2\1\0\1\20\1\40\1\56\1\41\1\22"+
    "\1\42\1\45\1\17\1\25\1\13\1\61\1\15\1\34\1\32\1\31"+
    "\1\16\1\60\1\43\1\30\1\23\1\47\1\57\1\44\1\55\1\13"+
    "\1\21\1\62\1\0\1\63\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\2\1\1\2\1\3\1\4\2\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\12\1\15"+
    "\1\16\1\17\1\20\2\12\1\21\1\22\1\0\1\22"+
    "\1\23\1\24\1\25\41\23\1\26\1\27\41\26\1\13"+
    "\21\23\1\24\35\23\21\26\1\27\35\26\27\23\1\24"+
    "\16\23\27\26\1\27\16\26\5\23\1\24\27\23\5\26"+
    "\1\27\27\26\5\23\1\24\17\23\5\26\1\27\17\26"+
    "\3\23\1\24\2\23\1\24\11\23\3\26\1\27\2\26"+
    "\1\27\11\26\14\23\14\26\10\23\1\24\10\26\1\27"+
    "\6\23\6\26\5\23\5\26\3\23\3\26";

  private static int [] zzUnpackAction() {
    int [] result = new int[474];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0104\0\u0138"+
    "\0\u016c\0\u01a0\0\u01d4\0\u0104\0\u0104\0\u0104\0\u0104\0\u0208"+
    "\0\u0104\0\u0104\0\u023c\0\u0270\0\u0104\0\u0104\0\u0104\0\u0104"+
    "\0\u02a4\0\u02d8\0\u0104\0\u030c\0\u030c\0\u0104\0\u0340\0\u0340"+
    "\0\u0104\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478\0\u04ac"+
    "\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0\0\u05e4\0\u0618\0\u064c"+
    "\0\u0680\0\u06b4\0\u06e8\0\u071c\0\u0750\0\u0784\0\u07b8\0\u07ec"+
    "\0\u0820\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c"+
    "\0\u09c0\0\u09f4\0\u0a28\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8"+
    "\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u0c98"+
    "\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38"+
    "\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8"+
    "\0\u100c\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u0a28\0\u1110\0\u1144"+
    "\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u1248\0\u127c\0\u12b0\0\u12e4"+
    "\0\u1318\0\u134c\0\u1380\0\u13b4\0\u13e8\0\u141c\0\u1450\0\u1484"+
    "\0\u14b8\0\u14ec\0\u1520\0\u1554\0\u1588\0\u15bc\0\u15f0\0\u1624"+
    "\0\u1658\0\u168c\0\u16c0\0\u16f4\0\u1728\0\u175c\0\u1790\0\u17c4"+
    "\0\u17f8\0\u182c\0\u1860\0\u1894\0\u18c8\0\u18fc\0\u1930\0\u1964"+
    "\0\u1998\0\u19cc\0\u1a00\0\u1a34\0\u1a68\0\u1a9c\0\u1ad0\0\u1b04"+
    "\0\u1b38\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c\0\u1c70\0\u1ca4"+
    "\0\u1cd8\0\u1d0c\0\u1d40\0\u1d74\0\u1da8\0\u1ddc\0\u1e10\0\u1e44"+
    "\0\u1e78\0\u1eac\0\u1ee0\0\u1f14\0\u1f48\0\u1f7c\0\u1fb0\0\u1fe4"+
    "\0\u2018\0\u204c\0\u2080\0\u20b4\0\u20e8\0\u211c\0\u2150\0\u2184"+
    "\0\u21b8\0\u21ec\0\u2220\0\u2254\0\u2288\0\u22bc\0\u22f0\0\u2324"+
    "\0\u2358\0\u238c\0\u23c0\0\u23f4\0\u2428\0\u245c\0\u2490\0\u24c4"+
    "\0\u24f8\0\u252c\0\u2560\0\u2594\0\u25c8\0\u25fc\0\u2630\0\u2664"+
    "\0\u2698\0\u26cc\0\u2700\0\u2734\0\u2768\0\u279c\0\u27d0\0\u2804"+
    "\0\u2838\0\u286c\0\u28a0\0\u28d4\0\u2908\0\u293c\0\u2970\0\u28d4"+
    "\0\u29a4\0\u29d8\0\u2a0c\0\u2a40\0\u2a74\0\u2aa8\0\u2adc\0\u2b10"+
    "\0\u1484\0\u2b44\0\u2b78\0\u2bac\0\u2be0\0\u2c14\0\u2c48\0\u2c7c"+
    "\0\u2cb0\0\u2ce4\0\u2d18\0\u2d4c\0\u2d80\0\u2db4\0\u2de8\0\u2e1c"+
    "\0\u2e50\0\u2e84\0\u2eb8\0\u2eec\0\u2f20\0\u2f54\0\u2f88\0\u2fbc"+
    "\0\u2ff0\0\u3024\0\u3058\0\u308c\0\u30c0\0\u3024\0\u30f4\0\u3128"+
    "\0\u315c\0\u3190\0\u31c4\0\u31f8\0\u322c\0\u3260\0\u1e10\0\u3294"+
    "\0\u32c8\0\u32fc\0\u3330\0\u3364\0\u3398\0\u33cc\0\u3400\0\u3434"+
    "\0\u3468\0\u349c\0\u34d0\0\u3504\0\u3538\0\u356c\0\u35a0\0\u35d4"+
    "\0\u3608\0\u363c\0\u3670\0\u36a4\0\u36d8\0\u370c\0\u3740\0\u3774"+
    "\0\u37a8\0\u37dc\0\u3810\0\u3844\0\u3878\0\u38ac\0\u38e0\0\u3914"+
    "\0\u3948\0\u397c\0\u39b0\0\u39e4\0\u3a18\0\u3a4c\0\u3a80\0\u3ab4"+
    "\0\u3ae8\0\u3b1c\0\u3b50\0\u3b84\0\u3bb8\0\u3bec\0\u3c20\0\u3c54"+
    "\0\u3c88\0\u3cbc\0\u3cf0\0\u3d24\0\u3d58\0\u3d8c\0\u3dc0\0\u3df4"+
    "\0\u3e28\0\u3e5c\0\u3e90\0\u3ec4\0\u3ef8\0\u3f2c\0\u3f60\0\u3f94"+
    "\0\u3fc8\0\u3ffc\0\u4030\0\u4064\0\u4098\0\u40cc\0\u4100\0\u4134"+
    "\0\u4168\0\u419c\0\u41d0\0\u4204\0\u4238\0\u426c\0\u42a0\0\u42d4"+
    "\0\u4308\0\u433c\0\u4370\0\u43a4\0\u43d8\0\u440c\0\u4440\0\u4474"+
    "\0\u44a8\0\u44dc\0\u4510\0\u4544\0\u4578\0\u45ac\0\u45e0\0\u4614"+
    "\0\u4648\0\u467c\0\u46b0\0\u46e4\0\u4718\0\u474c\0\u4780\0\u11e0"+
    "\0\u47b4\0\u47e8\0\u481c\0\u4850\0\u4884\0\u48b8\0\u48ec\0\u4920"+
    "\0\u4954\0\u4988\0\u49bc\0\u49f0\0\u4a24\0\u4a58\0\u4a8c\0\u1b6c"+
    "\0\u4ac0\0\u4af4\0\u4b28\0\u4b5c\0\u4b90\0\u4bc4\0\u4bf8\0\u4c2c"+
    "\0\u4c60\0\u4c94\0\u4cc8\0\u4cfc\0\u4d30\0\u4d64\0\u4d98\0\u4dcc"+
    "\0\u4e00\0\u4e34\0\u4e68\0\u4e9c\0\u4ed0\0\u4f04\0\u4f38\0\u4f6c"+
    "\0\u4fa0\0\u4fd4\0\u5008\0\u503c\0\u5070\0\u50a4\0\u50d8\0\u510c"+
    "\0\u5140\0\u5174\0\u51a8\0\u51dc\0\u5210\0\u5244\0\u5278\0\u52ac"+
    "\0\u52e0\0\u5314\0\u5348\0\u537c\0\u53b0\0\u53e4\0\u5418\0\u544c"+
    "\0\u5480\0\u54b4\0\u54e8\0\u551c\0\u5550\0\u5584\0\u55b8\0\u55ec"+
    "\0\u5620\0\u5654\0\u5688\0\u56bc\0\u56f0\0\u5724\0\u5758\0\u578c"+
    "\0\u57c0\0\u57f4\0\u5828\0\u585c\0\u5890\0\u58c4\0\u58f8\0\u592c"+
    "\0\u5960\0\u5994\0\u59c8\0\u59fc\0\u5a30\0\u5a64\0\u5a98\0\u5acc"+
    "\0\u5b00\0\u5b34";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[474];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\6\1\12\1\6"+
    "\1\13\1\14\1\15\47\5\1\16\1\17\1\20\2\21"+
    "\1\22\1\23\1\21\1\20\1\21\1\24\1\25\1\26"+
    "\47\20\1\27\1\30\1\20\3\21\1\23\1\21\1\20"+
    "\1\21\1\31\1\25\1\26\47\20\1\27\1\30\1\20"+
    "\2\21\1\32\1\23\1\21\1\20\1\21\1\24\1\25"+
    "\1\26\47\20\1\27\1\30\1\5\5\0\1\5\4\0"+
    "\47\5\71\0\1\33\64\0\1\11\57\0\1\12\1\34"+
    "\4\35\1\12\1\36\3\35\47\12\2\35\10\37\1\40"+
    "\1\41\2\37\1\42\1\43\1\44\1\37\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\37\1\71\1\72\1\37\1\73\1\74"+
    "\1\75\1\76\1\77\1\37\1\100\1\101\1\102\1\63"+
    "\2\37\1\20\5\0\1\20\4\0\47\20\6\0\1\23"+
    "\57\0\10\103\1\104\1\0\2\103\1\105\1\106\1\107"+
    "\1\103\1\110\1\111\1\112\1\113\1\114\1\115\1\116"+
    "\1\117\1\120\1\121\1\122\1\123\1\124\1\125\1\126"+
    "\1\127\1\130\1\131\1\132\1\133\1\103\1\134\1\135"+
    "\1\103\1\136\1\137\1\140\1\141\1\142\1\103\1\143"+
    "\1\144\1\145\1\126\12\103\1\104\1\0\1\146\1\103"+
    "\1\105\1\106\1\107\1\103\1\110\1\111\1\112\1\113"+
    "\1\114\1\115\1\116\1\117\1\120\1\121\1\122\1\123"+
    "\1\124\1\125\1\126\1\127\1\130\1\131\1\132\1\133"+
    "\1\103\1\134\1\135\1\103\1\136\1\137\1\140\1\141"+
    "\1\142\1\103\1\143\1\144\1\145\1\126\2\103\3\0"+
    "\1\22\60\0\1\35\1\34\5\35\1\36\54\35\13\0"+
    "\47\37\15\0\2\37\1\147\44\37\15\0\5\37\1\150"+
    "\1\37\1\151\16\37\1\152\20\37\15\0\4\37\1\153"+
    "\1\154\4\37\1\40\2\37\1\153\12\37\1\155\16\37"+
    "\15\0\2\37\1\147\1\156\43\37\15\0\7\37\1\157"+
    "\37\37\15\0\3\37\1\160\4\37\1\161\6\37\1\162"+
    "\22\37\1\163\2\37\1\164\1\37\15\0\5\37\1\165"+
    "\4\37\1\166\16\37\1\167\15\37\15\0\4\37\1\153"+
    "\42\37\15\0\16\37\1\157\1\170\27\37\15\0\7\37"+
    "\1\171\37\37\15\0\3\37\1\160\4\37\1\161\36\37"+
    "\15\0\7\37\1\172\2\37\1\173\21\37\1\174\12\37"+
    "\15\0\17\37\1\175\1\37\1\176\25\37\15\0\7\37"+
    "\1\177\6\37\1\200\15\37\1\40\12\37\15\0\5\37"+
    "\1\201\41\37\15\0\3\37\1\202\30\37\1\40\12\37"+
    "\15\0\16\37\1\157\30\37\15\0\5\37\1\203\41\37"+
    "\15\0\5\37\1\204\1\37\1\205\37\37\15\0\7\37"+
    "\1\206\2\37\1\207\34\37\15\0\7\37\1\171\6\37"+
    "\1\210\30\37\15\0\12\37\1\211\3\37\1\212\30\37"+
    "\15\0\4\37\1\213\2\37\1\214\2\37\1\215\34\37"+
    "\15\0\5\37\1\201\1\37\1\216\37\37\15\0\34\37"+
    "\1\40\12\37\15\0\21\37\1\176\25\37\15\0\4\37"+
    "\1\153\5\37\1\40\2\37\1\153\31\37\15\0\4\37"+
    "\1\213\5\37\1\215\34\37\15\0\12\37\1\173\34\37"+
    "\15\0\5\37\1\72\41\37\15\0\4\37\1\217\1\220"+
    "\4\37\1\221\13\37\1\222\5\37\1\220\12\37\15\0"+
    "\5\37\1\223\41\37\15\0\34\37\1\224\10\37\1\225"+
    "\1\37\15\0\47\103\15\0\2\103\1\226\44\103\15\0"+
    "\5\103\1\227\1\103\1\230\16\103\1\231\20\103\15\0"+
    "\4\103\1\232\1\233\4\103\1\104\2\103\1\232\12\103"+
    "\1\234\16\103\15\0\2\103\1\226\1\235\43\103\15\0"+
    "\7\103\1\236\37\103\15\0\3\103\1\237\4\103\1\240"+
    "\6\103\1\241\22\103\1\242\2\103\1\243\1\103\15\0"+
    "\5\103\1\244\4\103\1\245\16\103\1\246\15\103\15\0"+
    "\4\103\1\232\42\103\15\0\16\103\1\236\1\247\27\103"+
    "\15\0\7\103\1\250\37\103\15\0\3\103\1\237\4\103"+
    "\1\240\36\103\15\0\7\103\1\251\2\103\1\252\21\103"+
    "\1\253\12\103\15\0\17\103\1\254\1\103\1\255\25\103"+
    "\15\0\7\103\1\256\6\103\1\257\15\103\1\104\12\103"+
    "\15\0\5\103\1\260\41\103\15\0\3\103\1\261\30\103"+
    "\1\104\12\103\15\0\16\103\1\236\30\103\15\0\5\103"+
    "\1\262\41\103\15\0\5\103\1\263\1\103\1\264\37\103"+
    "\15\0\7\103\1\265\2\103\1\266\34\103\15\0\7\103"+
    "\1\250\6\103\1\267\30\103\15\0\12\103\1\270\3\103"+
    "\1\271\30\103\15\0\4\103\1\272\2\103\1\273\2\103"+
    "\1\274\34\103\15\0\5\103\1\260\1\103\1\275\37\103"+
    "\15\0\34\103\1\104\12\103\15\0\21\103\1\255\25\103"+
    "\15\0\4\103\1\232\5\103\1\104\2\103\1\232\31\103"+
    "\15\0\4\103\1\272\5\103\1\274\34\103\15\0\12\103"+
    "\1\252\34\103\15\0\5\103\1\135\41\103\15\0\4\103"+
    "\1\276\1\277\4\103\1\300\13\103\1\301\5\103\1\277"+
    "\12\103\15\0\5\103\1\302\41\103\15\0\34\103\1\303"+
    "\10\103\1\304\1\103\15\0\3\37\1\305\43\37\15\0"+
    "\21\37\1\306\3\37\1\307\21\37\15\0\27\37\1\310"+
    "\15\37\1\40\1\37\15\0\16\37\1\311\30\37\15\0"+
    "\12\37\1\40\34\37\15\0\30\37\1\312\1\37\1\313"+
    "\14\37\15\0\16\37\1\314\30\37\15\0\3\37\1\315"+
    "\43\37\15\0\10\37\1\161\36\37\15\0\15\37\1\316"+
    "\31\37\15\0\5\37\1\40\41\37\15\0\26\37\1\40"+
    "\5\37\1\317\12\37\15\0\12\37\1\320\34\37\15\0"+
    "\34\37\1\321\12\37\15\0\25\37\1\322\6\37\1\40"+
    "\12\37\15\0\21\37\1\323\25\37\15\0\16\37\1\324"+
    "\30\37\15\0\10\37\1\40\36\37\15\0\2\37\1\157"+
    "\44\37\15\0\10\37\1\325\32\37\1\326\3\37\15\0"+
    "\32\37\1\327\14\37\15\0\3\37\1\330\15\37\1\40"+
    "\3\37\1\331\21\37\15\0\7\37\1\324\37\37\15\0"+
    "\7\37\1\332\37\37\15\0\31\37\1\333\13\37\1\40"+
    "\1\37\15\0\10\37\1\334\36\37\15\0\21\37\1\327"+
    "\25\37\15\0\27\37\1\335\17\37\15\0\3\37\1\336"+
    "\43\37\15\0\21\37\1\306\25\37\15\0\27\37\1\337"+
    "\17\37\15\0\10\37\1\161\21\37\1\340\14\37\15\0"+
    "\32\37\1\341\14\37\15\0\43\37\1\342\3\37\15\0"+
    "\32\37\1\343\14\37\15\0\16\37\1\344\11\37\1\345"+
    "\16\37\15\0\16\37\1\40\30\37\15\0\27\37\1\40"+
    "\17\37\15\0\32\37\1\346\14\37\15\0\45\37\1\40"+
    "\1\37\15\0\5\37\1\347\4\37\1\40\34\37\15\0"+
    "\3\37\1\40\43\37\15\0\10\37\1\350\36\37\15\0"+
    "\16\37\1\351\30\37\15\0\30\37\1\352\16\37\15\0"+
    "\5\37\1\314\41\37\15\0\34\37\1\224\12\37\15\0"+
    "\3\103\1\353\43\103\15\0\21\103\1\354\3\103\1\355"+
    "\21\103\15\0\27\103\1\356\15\103\1\104\1\103\15\0"+
    "\16\103\1\357\30\103\15\0\12\103\1\104\34\103\15\0"+
    "\30\103\1\360\1\103\1\361\14\103\15\0\16\103\1\362"+
    "\30\103\15\0\3\103\1\363\43\103\15\0\10\103\1\240"+
    "\36\103\15\0\15\103\1\364\31\103\15\0\5\103\1\104"+
    "\41\103\15\0\26\103\1\104\5\103\1\365\12\103\15\0"+
    "\12\103\1\366\34\103\15\0\34\103\1\367\12\103\15\0"+
    "\25\103\1\370\6\103\1\104\12\103\15\0\21\103\1\371"+
    "\25\103\15\0\16\103\1\372\30\103\15\0\10\103\1\104"+
    "\36\103\15\0\2\103\1\236\44\103\15\0\10\103\1\373"+
    "\32\103\1\374\3\103\15\0\32\103\1\375\14\103\15\0"+
    "\3\103\1\376\15\103\1\104\3\103\1\377\21\103\15\0"+
    "\7\103\1\372\37\103\15\0\7\103\1\u0100\37\103\15\0"+
    "\31\103\1\u0101\13\103\1\104\1\103\15\0\10\103\1\u0102"+
    "\36\103\15\0\21\103\1\375\25\103\15\0\27\103\1\u0103"+
    "\17\103\15\0\3\103\1\u0104\43\103\15\0\21\103\1\354"+
    "\25\103\15\0\27\103\1\u0105\17\103\15\0\10\103\1\240"+
    "\21\103\1\u0106\14\103\15\0\32\103\1\u0107\14\103\15\0"+
    "\43\103\1\u0108\3\103\15\0\32\103\1\u0109\14\103\15\0"+
    "\16\103\1\u010a\11\103\1\u010b\16\103\15\0\16\103\1\104"+
    "\30\103\15\0\27\103\1\104\17\103\15\0\32\103\1\u010c"+
    "\14\103\15\0\45\103\1\104\1\103\15\0\5\103\1\u010d"+
    "\4\103\1\104\34\103\15\0\3\103\1\104\43\103\15\0"+
    "\10\103\1\u010e\36\103\15\0\16\103\1\u010f\30\103\15\0"+
    "\30\103\1\u0110\16\103\15\0\5\103\1\362\41\103\15\0"+
    "\34\103\1\303\12\103\15\0\4\37\1\161\42\37\15\0"+
    "\25\37\1\u0111\21\37\15\0\7\37\1\u0112\37\37\15\0"+
    "\10\37\1\u0113\36\37\15\0\10\37\1\u0114\36\37\15\0"+
    "\5\37\1\u0115\2\37\1\40\36\37\15\0\7\37\1\u0116"+
    "\37\37\15\0\26\37\1\40\20\37\15\0\7\37\1\u0117"+
    "\37\37\15\0\12\37\1\u0118\34\37\15\0\21\37\1\u0119"+
    "\25\37\15\0\15\37\1\311\31\37\15\0\5\37\1\326"+
    "\41\37\15\0\2\37\1\350\44\37\15\0\7\37\1\u0114"+
    "\37\37\15\0\43\37\1\u011a\3\37\15\0\21\37\1\u011b"+
    "\25\37\15\0\10\37\1\u011c\36\37\15\0\21\37\1\161"+
    "\25\37\15\0\15\37\1\u011d\31\37\15\0\3\37\1\u011e"+
    "\11\37\1\u011f\31\37\15\0\32\37\1\161\14\37\15\0"+
    "\7\37\1\u0120\1\u0121\16\37\1\u0122\13\37\1\u0123\3\37"+
    "\15\0\12\37\1\u0124\34\37\15\0\16\37\1\u0125\30\37"+
    "\15\0\3\37\1\161\43\37\15\0\10\37\1\u0126\36\37"+
    "\15\0\43\37\1\u0127\3\37\15\0\34\37\1\u0128\12\37"+
    "\15\0\34\37\1\u0129\12\37\15\0\10\37\1\u012a\36\37"+
    "\15\0\5\37\1\u012b\41\37\15\0\4\37\1\310\42\37"+
    "\15\0\3\37\1\u012c\43\37\15\0\7\37\1\40\37\37"+
    "\15\0\3\37\1\51\3\37\1\u012d\37\37\15\0\4\103"+
    "\1\240\42\103\15\0\25\103\1\u012e\21\103\15\0\7\103"+
    "\1\u012f\37\103\15\0\10\103\1\u0130\36\103\15\0\10\103"+
    "\1\u0131\36\103\15\0\5\103\1\u0132\2\103\1\104\36\103"+
    "\15\0\7\103\1\u0133\37\103\15\0\26\103\1\104\20\103"+
    "\15\0\7\103\1\u0134\37\103\15\0\12\103\1\u0135\34\103"+
    "\15\0\21\103\1\u0136\25\103\15\0\15\103\1\357\31\103"+
    "\15\0\5\103\1\374\41\103\15\0\2\103\1\u010e\44\103"+
    "\15\0\7\103\1\u0131\37\103\15\0\43\103\1\u0137\3\103"+
    "\15\0\21\103\1\u0138\25\103\15\0\10\103\1\u0139\36\103"+
    "\15\0\21\103\1\240\25\103\15\0\15\103\1\u013a\31\103"+
    "\15\0\3\103\1\u013b\11\103\1\u013c\31\103\15\0\32\103"+
    "\1\240\14\103\15\0\7\103\1\u013d\1\u013e\16\103\1\u013f"+
    "\13\103\1\u0140\3\103\15\0\12\103\1\u0141\34\103\15\0"+
    "\16\103\1\u0142\30\103\15\0\3\103\1\240\43\103\15\0"+
    "\10\103\1\u0143\36\103\15\0\43\103\1\u0144\3\103\15\0"+
    "\34\103\1\u0145\12\103\15\0\34\103\1\u0146\12\103\15\0"+
    "\10\103\1\u0147\36\103\15\0\5\103\1\u0148\41\103\15\0"+
    "\4\103\1\356\42\103\15\0\3\103\1\u0149\43\103\15\0"+
    "\7\103\1\104\37\103\15\0\3\103\1\114\3\103\1\u014a"+
    "\37\103\15\0\26\37\1\161\20\37\15\0\2\37\1\40"+
    "\44\37\15\0\5\37\1\u014b\41\37\15\0\15\37\1\40"+
    "\31\37\15\0\32\37\1\u014c\14\37\15\0\30\37\1\u014d"+
    "\16\37\15\0\17\37\1\u014e\27\37\15\0\2\37\1\u014f"+
    "\44\37\15\0\12\37\1\u0150\34\37\15\0\16\37\1\u0151"+
    "\30\37\15\0\12\37\1\u0152\34\37\15\0\12\37\1\u014f"+
    "\34\37\15\0\7\37\1\u0153\37\37\15\0\5\37\1\u0154"+
    "\41\37\15\0\7\37\1\u0155\24\37\1\u0156\12\37\15\0"+
    "\17\37\1\u0157\27\37\15\0\4\37\1\u0158\42\37\15\0"+
    "\16\37\1\u0159\30\37\15\0\16\37\1\u015a\30\37\15\0"+
    "\17\37\1\40\27\37\15\0\16\37\1\u015b\30\37\15\0"+
    "\5\37\1\u014b\22\37\1\u015c\16\37\15\0\5\37\1\220"+
    "\26\37\1\220\12\37\15\0\21\37\1\u015d\25\37\15\0"+
    "\30\37\1\350\16\37\15\0\17\37\1\u015e\27\37\15\0"+
    "\2\37\1\u0112\44\37\15\0\10\37\1\u015f\36\37\15\0"+
    "\3\37\1\160\43\37\15\0\26\103\1\240\20\103\15\0"+
    "\2\103\1\104\44\103\15\0\5\103\1\u0160\41\103\15\0"+
    "\15\103\1\104\31\103\15\0\32\103\1\u0161\14\103\15\0"+
    "\30\103\1\u0162\16\103\15\0\17\103\1\u0163\27\103\15\0"+
    "\2\103\1\u0164\44\103\15\0\12\103\1\u0165\34\103\15\0"+
    "\16\103\1\u0166\30\103\15\0\12\103\1\u0167\34\103\15\0"+
    "\12\103\1\u0164\34\103\15\0\7\103\1\u0168\37\103\15\0"+
    "\5\103\1\u0169\41\103\15\0\7\103\1\u016a\24\103\1\u016b"+
    "\12\103\15\0\17\103\1\u016c\27\103\15\0\4\103\1\u016d"+
    "\42\103\15\0\16\103\1\u016e\30\103\15\0\16\103\1\u016f"+
    "\30\103\15\0\17\103\1\104\27\103\15\0\16\103\1\u0170"+
    "\30\103\15\0\5\103\1\u0160\22\103\1\u0171\16\103\15\0"+
    "\5\103\1\277\26\103\1\277\12\103\15\0\21\103\1\u0172"+
    "\25\103\15\0\30\103\1\u010e\16\103\15\0\17\103\1\u0173"+
    "\27\103\15\0\2\103\1\u012f\44\103\15\0\10\103\1\u0174"+
    "\36\103\15\0\3\103\1\237\43\103\15\0\30\37\1\u0175"+
    "\16\37\15\0\30\37\1\u0176\16\37\15\0\7\37\1\214"+
    "\37\37\15\0\26\37\1\u0177\20\37\15\0\16\37\1\u0124"+
    "\30\37\15\0\12\37\1\u0178\31\37\1\40\2\37\15\0"+
    "\2\37\1\u0179\44\37\15\0\17\37\1\u017a\27\37\15\0"+
    "\10\37\1\u017b\36\37\15\0\30\37\1\u017c\16\37\15\0"+
    "\10\37\1\u017b\32\37\1\326\3\37\15\0\25\37\1\u017d"+
    "\21\37\15\0\44\37\1\u017e\2\37\15\0\7\37\1\u017f"+
    "\37\37\15\0\17\37\1\351\27\37\15\0\21\37\1\u0180"+
    "\25\37\15\0\10\37\1\u0181\36\37\15\0\12\37\1\215"+
    "\34\37\15\0\7\37\1\u0182\37\37\15\0\16\37\1\u0183"+
    "\30\37\15\0\7\37\1\u0184\37\37\15\0\30\103\1\u0185"+
    "\16\103\15\0\30\103\1\u0186\16\103\15\0\7\103\1\273"+
    "\37\103\15\0\26\103\1\u0187\20\103\15\0\16\103\1\u0141"+
    "\30\103\15\0\12\103\1\u0188\31\103\1\104\2\103\15\0"+
    "\2\103\1\u0189\44\103\15\0\17\103\1\u018a\27\103\15\0"+
    "\10\103\1\u018b\36\103\15\0\30\103\1\u018c\16\103\15\0"+
    "\10\103\1\u018b\32\103\1\374\3\103\15\0\25\103\1\u018d"+
    "\21\103\15\0\44\103\1\u018e\2\103\15\0\7\103\1\u018f"+
    "\37\103\15\0\17\103\1\u010f\27\103\15\0\21\103\1\u0190"+
    "\25\103\15\0\10\103\1\u0191\36\103\15\0\12\103\1\274"+
    "\34\103\15\0\7\103\1\u0192\37\103\15\0\16\103\1\u0193"+
    "\30\103\15\0\7\103\1\u0194\37\103\15\0\30\37\1\u0195"+
    "\16\37\15\0\5\37\1\u0196\41\37\15\0\12\37\1\u0197"+
    "\34\37\15\0\34\37\1\u0198\12\37\15\0\34\37\1\u0114"+
    "\12\37\15\0\7\37\1\216\7\37\1\u0199\27\37\15\0"+
    "\5\37\1\u0115\41\37\15\0\15\37\1\u019a\31\37\15\0"+
    "\12\37\1\u019b\34\37\15\0\16\37\1\u019c\30\37\15\0"+
    "\21\37\1\u019d\25\37\15\0\17\37\1\u019e\27\37\15\0"+
    "\17\37\1\u019f\27\37\15\0\10\37\1\u01a0\36\37\15\0"+
    "\30\37\1\40\16\37\15\0\30\103\1\u01a1\16\103\15\0"+
    "\5\103\1\u01a2\41\103\15\0\12\103\1\u01a3\34\103\15\0"+
    "\34\103\1\u01a4\12\103\15\0\34\103\1\u0131\12\103\15\0"+
    "\7\103\1\275\7\103\1\u01a5\27\103\15\0\5\103\1\u0132"+
    "\41\103\15\0\15\103\1\u01a6\31\103\15\0\12\103\1\u01a7"+
    "\34\103\15\0\16\103\1\u01a8\30\103\15\0\21\103\1\u01a9"+
    "\25\103\15\0\17\103\1\u01aa\27\103\15\0\17\103\1\u01ab"+
    "\27\103\15\0\10\103\1\u01ac\36\103\15\0\30\103\1\104"+
    "\16\103\15\0\16\37\1\u01ad\30\37\15\0\3\37\1\u01ae"+
    "\43\37\15\0\42\37\1\40\4\37\15\0\21\37\1\u0124"+
    "\25\37\15\0\7\37\1\216\37\37\15\0\7\37\1\u01af"+
    "\24\37\1\u01b0\12\37\15\0\30\37\1\u01b1\16\37\15\0"+
    "\30\37\1\u01b2\16\37\15\0\5\37\1\u01b3\41\37\15\0"+
    "\16\37\1\221\30\37\15\0\10\37\1\u01b4\36\37\15\0"+
    "\7\37\1\u01b5\37\37\15\0\16\103\1\u01b6\30\103\15\0"+
    "\3\103\1\u01b7\43\103\15\0\42\103\1\104\4\103\15\0"+
    "\21\103\1\u0141\25\103\15\0\7\103\1\275\37\103\15\0"+
    "\7\103\1\u01b8\24\103\1\u01b9\12\103\15\0\30\103\1\u01ba"+
    "\16\103\15\0\30\103\1\u01bb\16\103\15\0\5\103\1\u01bc"+
    "\41\103\15\0\16\103\1\300\30\103\15\0\10\103\1\u01bd"+
    "\36\103\15\0\7\103\1\u01be\37\103\15\0\31\37\1\40"+
    "\15\37\15\0\4\37\1\40\42\37\15\0\43\37\1\326"+
    "\3\37\15\0\25\37\1\u01bf\21\37\15\0\16\37\1\u01c0"+
    "\30\37\15\0\7\37\1\u01c1\37\37\15\0\17\37\1\314"+
    "\27\37\15\0\43\37\1\u01c2\3\37\15\0\10\37\1\u01c3"+
    "\10\37\1\u01c4\25\37\15\0\31\103\1\104\15\103\15\0"+
    "\4\103\1\104\42\103\15\0\43\103\1\374\3\103\15\0"+
    "\25\103\1\u01c5\21\103\15\0\16\103\1\u01c6\30\103\15\0"+
    "\7\103\1\u01c7\37\103\15\0\17\103\1\362\27\103\15\0"+
    "\43\103\1\u01c8\3\103\15\0\10\103\1\u01c9\10\103\1\u01ca"+
    "\25\103\15\0\15\37\1\u01cb\31\37\15\0\17\37\1\u01cc"+
    "\27\37\15\0\21\37\1\40\25\37\15\0\2\37\1\u01cd"+
    "\44\37\15\0\7\37\1\u01ce\37\37\15\0\5\37\1\u01cf"+
    "\41\37\15\0\15\103\1\u01d0\31\103\15\0\17\103\1\u01d1"+
    "\27\103\15\0\21\103\1\104\25\103\15\0\2\103\1\u01d2"+
    "\44\103\15\0\7\103\1\u01d3\37\103\15\0\5\103\1\u01d4"+
    "\41\103\15\0\7\37\1\u01af\37\37\15\0\21\37\1\u01d5"+
    "\25\37\15\0\5\37\1\u01d6\41\37\15\0\42\37\1\351"+
    "\4\37\15\0\30\37\1\u01d7\16\37\15\0\7\103\1\u01b8"+
    "\37\103\15\0\21\103\1\u01d8\25\103\15\0\5\103\1\u01d9"+
    "\41\103\15\0\42\103\1\u010f\4\103\15\0\30\103\1\u01da"+
    "\16\103\15\0\7\37\1\u0159\37\37\15\0\15\37\1\u0114"+
    "\31\37\15\0\46\37\1\40\15\0\7\103\1\u016e\37\103"+
    "\15\0\15\103\1\u0131\31\103\15\0\46\103\1\104\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23400];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\1\2\11\4\1\4\11\1\1\2\11\2\1"+
    "\4\11\2\1\1\11\1\1\1\0\1\11\2\1\1\11"+
    "\u01b9\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[474];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    /**
     * Default constructor is needed as we will always call the yyreset
     */
    public LaTeXLexer() {
        super();
    }

    @Override
    public int yychar() {
        return yychar;
    }

    private static final byte PAREN     = 1;
    private static final byte BRACKET   = 2;
    private static final byte CURLY     = 3;



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LaTeXLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LaTeXLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 150) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 20: 
          { return token(TokenType.KEYWORD);
          }
        case 24: break;
        case 11: 
          { yybegin(YYINITIAL);
                                   return token(TokenType.OPERATOR);
          }
        case 25: break;
        case 4: 
          { return token(TokenType.NUMBER);
          }
        case 26: break;
        case 21: 
          { yybegin(MATHMODE2);
                                   return token(TokenType.OPERATOR);
          }
        case 27: break;
        case 2: 
          { return token(TokenType.OPERATOR);
          }
        case 28: break;
        case 7: 
          { return token(TokenType.OPERATOR,  CURLY);
          }
        case 29: break;
        case 8: 
          { return token(TokenType.OPERATOR, -CURLY);
          }
        case 30: break;
        case 1: 
          { return token(TokenType.DEFAULT);
          }
        case 31: break;
        case 13: 
          { return token(TokenType.TYPE3,  BRACKET);
          }
        case 32: break;
        case 12: 
          { return token(TokenType.STRING);
          }
        case 33: break;
        case 16: 
          { return token(TokenType.TYPE3, -CURLY);
          }
        case 34: break;
        case 22: 
          { return token(TokenType.TYPE);
          }
        case 35: break;
        case 6: 
          { return token(TokenType.OPERATOR, -BRACKET);
          }
        case 36: break;
        case 17: 
          { yybegin(MATHMODE3);
                                   return token(TokenType.OPERATOR);
          }
        case 37: break;
        case 23: 
          { return token(TokenType.KEYWORD2);
          }
        case 38: break;
        case 19: 
          { return token(TokenType.IDENTIFIER);
          }
        case 39: break;
        case 9: 
          { return token(TokenType.TYPE2);
          }
        case 40: break;
        case 14: 
          { return token(TokenType.TYPE3, -BRACKET);
          }
        case 41: break;
        case 5: 
          { return token(TokenType.OPERATOR,  BRACKET);
          }
        case 42: break;
        case 3: 
          { yybegin(MATHMODE1);
                                   return token(TokenType.OPERATOR);
          }
        case 43: break;
        case 18: 
          { return token(TokenType.COMMENT);
          }
        case 44: break;
        case 15: 
          { return token(TokenType.TYPE3,  CURLY);
          }
        case 45: break;
        case 10: break;
        case 46: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return null;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

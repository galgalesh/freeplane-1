dependencies {
    compile project(':freeplane')

    // from flatDir "localGitDepsRepository":
    compile ':jsyntaxpane-0.9.6~r156-5' // from the Debian "libjsyntaxpane-java" package
}

jar {
    manifest {
        name = pluginid
        symbolicName = pluginid

        configurations.runtime.transitive = false
        def deps = filterAndExternalizePluginDependencies(configurations.runtime.files)
        deps.add(0, "lib/plugin-" + project.version + '.jar')

        attributes 'Class-Path': deps.join(', ')
        attributes 'Bundle-ClassPath': '., ' + deps.join(', ')

        instruction 'Bundle-Vendor', 'Freeplane Project'
        instruction 'Bundle-Activator', pluginid + ".Activator"
        instruction 'Bundle-RequiredExecutionEnvironment', 'JavaSE-1.7'

        def imports = """\
                      org.osgi.framework;version="1.3.0",
                      org.freeplane.core.*,
                      org.freeplane.features.*,
                      org.freeplane.main.*,
                      org.freeplane.n3.*,
                      org.freeplane.view.*
                      """
        instruction 'Import-Package', imports.replaceAll("\\s+", "")
        
        def exports = """\
                      jsyntaxpane,
                      jsyntaxpane.lexers,
                      jsyntaxpane.syntaxkits,
                      jsyntaxpane.actions
                      """
        // bnd f**cks up the exports, so we bypass it using attributes!
        attributes 'Export-Package': exports.replaceAll("\\s+", "")

        // Require-Bundle is ignored by bnd => replaced by Import-Package!
        //instruction 'Require-Bundle', 'org.freeplane.core;bundle-version="1.0.1", org.freeplane.plugin.script;bundle-version="1.0.1"'
    }
}

task generateLaTeXLexer(type: Exec) {
    onlyIf { !file('src/main/java/jsyntaxpane/lexers/LaTeXLexer.java').exists() }

    commandLine 'jflex', '-d', 'src/main/java/jsyntaxpane/lexers/', 'src/main/java/jsyntaxpane/lexers/latex.flex'
}

compileJava.dependsOn generateLaTeXLexer
